import Sprockell
prog :: [Instruction]
prog = [
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    ReadInstr (IndAddr regSprID),
    Receive regA,
    Compute Equal regSprID reg0 regB,
    Branch regB (Rel 4),
    Compute NEq regA regSprID regB,
    Branch regB (Ind regA),
    Jump (Rel (-6)),
    Load (ImmValue 1) regA,
    Store regA (DirAddr 0),
    Load (ImmValue 5) regA,
    Store regA (DirAddr 1),
    Load (ImmValue 3) regA,
    Store regA (DirAddr 2),
    Load (ImmValue 2) regA,
    Store regA (DirAddr 3),
    Load (ImmValue 6) regA,
    Store regA (DirAddr 4),
    Load (ImmValue 87) regA,
    Store regA (DirAddr 5),
    Load (ImmValue 4) regA,
    Store regA (DirAddr 6),
    Load (ImmValue 2) regA,
    Store regA (DirAddr 7),
    Load (ImmValue 4) regA,
    Store regA (DirAddr 8),
    Load (ImmValue 6) regA,
    Store regA (DirAddr 9),
    Load (ImmValue 7) regA,
    Store regA (DirAddr 10),
    Load (ImmValue 23) regA,
    Store regA (DirAddr 11),
    Load (ImmValue 56) regA,
    Store regA (DirAddr 12),
    Load (ImmValue 654) regA,
    Store regA (DirAddr 13),
    Load (ImmValue 2) regA,
    Store regA (DirAddr 14),
    Load (ImmValue 34) regA,
    Store regA (DirAddr 15),
    Load (ImmValue 0) regA,
    Store regA (DirAddr 16),
    Load (ImmValue 0) regA,
    Store regA (DirAddr 17),
    Load (DirAddr 16) regA,
    Compute Equal regA reg0 regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 66),
    Load (ImmValue 0) regA,
    Store regA (DirAddr 17),
    Load (ImmValue 1) regA,
    Store regA (DirAddr 16),
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 15) regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 54),
    Load (DirAddr 17) regA,
    Load (ImmValue 0) regB,
    Compute Add regB regA regA,
    Load ( IndAddr regA) regA,
    Push regA,
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Add regB regA regA,
    Load (ImmValue 0) regB,
    Compute Add regB regA regA,
    Load ( IndAddr regA) regA,
    Pop regB,
    Compute Gt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 30),
    Load (DirAddr 17) regA,
    Load (ImmValue 0) regB,
    Compute Add regB regA regA,
    Load ( IndAddr regA) regA,
    Store regA (DirAddr 18),
    Load (DirAddr 17) regA,
    Load (ImmValue 0) regE,
    Compute Add regA regE regE,
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Add regB regA regA,
    Load (ImmValue 0) regB,
    Compute Add regB regA regA,
    Load ( IndAddr regA) regA,
    Store regA (IndAddr regE),
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Add regB regA regA,
    Load (ImmValue 0) regE,
    Compute Add regA regE regE,
    Load (DirAddr 18) regA,
    Store regA (IndAddr regE),
    Load (ImmValue 0) regA,
    Store regA (DirAddr 16),
    Jump (Rel 1),
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Add regB regA regA,
    Store regA (DirAddr 17),
    Jump (Rel  (-59)),
    Jump (Rel  (-68)),
    Load (ImmValue 0) regA,
    Store regA (DirAddr 17),
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 16) regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 13),
    Load (DirAddr 17) regA,
    Load (ImmValue 0) regB,
    Compute Add regB regA regA,
    Load ( IndAddr regA) regA,
    WriteInstr regA numberIO,
    Load (DirAddr 17) regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Add regB regA regA,
    Store regA (DirAddr 17),
    Jump (Rel  (-18)),
    Compute Add reg0 regPC regA,
    Compute Equal regSprID reg0 regB,
    Branch regB (Rel 2),
    EndProg,
    EndProg]
main = run [prog]
