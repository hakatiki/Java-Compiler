import Sprockell
prog :: [Instruction]
prog = [
	Load (ImmValue 0) regA,
	WriteInstr regA (DirAddr 0),
	Load (ImmValue 1) regA,
	WriteInstr regA (DirAddr 1),
	Load (ImmValue 2) regA,
	WriteInstr regA (DirAddr 2),
	ReadInstr (IndAddr regSprID),
	Receive regA,
	Compute Equal regSprID reg0 regB,
	Branch regB (Rel 4),
	Compute NEq regA regSprID regB,
	Branch regB (Ind regA),
	Jump (Rel (-6)),
	Load (ImmValue 5 ) regA,
	WriteInstr regA (DirAddr 4 ),
	ReadInstr (DirAddr 1),
	Receive regA,
	Load (ImmValue 1) regC,
	Compute NEq regA regC regB,
	Branch regB (Rel (-7)),
	WriteInstr regPC (DirAddr 1),
	Compute Equal regSprID reg0 regB,
	Branch regB (Rel 6),
	ReadInstr (DirAddr 4),
	Receive regA,
	WriteInstr regA numberIO,
	WriteInstr regSprID (DirAddr 1),
	Jump (Abs 6),
	ReadInstr (DirAddr 2),
	Receive regA,
	Load (ImmValue 2) regC,
	Compute NEq regA regC regB,
	Branch regB (Rel (-7)),
	WriteInstr regPC (DirAddr 2),
	Compute Equal regSprID reg0 regB,
	Branch regB (Rel 6),
	ReadInstr (DirAddr 4),
	Receive regA,
	WriteInstr regA numberIO,
	WriteInstr regSprID (DirAddr 2),
	Jump (Abs 6),
	ReadInstr (DirAddr 1),
	Receive regA,
	Load (ImmValue 1) regC,
	Compute NEq regA regC regB,
	Branch regB (Rel (-4)),
	ReadInstr (DirAddr 2),
	Receive regA,
	Load (ImmValue 2) regC,
	Compute NEq regA regC regB,
	Branch regB (Rel (-9)),
	Compute Add reg0 regPC regA,
	Compute Equal regSprID reg0 regB,
	Branch regB (Rel 2),
	EndProg,
	WriteInstr regA (DirAddr 1),
	WriteInstr regA (DirAddr 2),
	EndProg]
main = run [prog]
