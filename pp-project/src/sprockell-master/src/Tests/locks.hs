import Sprockell
prog :: [Instruction]
prog = [
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    Load (ImmValue 1) regA,
    WriteInstr regA (DirAddr 1),
    Load (ImmValue 2) regA,
    WriteInstr regA (DirAddr 2),
    ReadInstr (IndAddr regSprID),
    Receive regA,
    Compute Equal regSprID reg0 regB,
    Branch regB (Rel 4),
    Compute NEq regA regSprID regB,
    Branch regB (Ind regA),
    Jump (Rel (-6)),
    Load (ImmValue 5) regA,
    WriteInstr regA (DirAddr 3),
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-5)),
    WriteInstr regPC (DirAddr 1),
    Load (ImmValue 0) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 26),
    ReadInstr (DirAddr 3),
    Receive regA,
    Push regA,
    Load (ImmValue 36) regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 16),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    ReadInstr (DirAddr 3),
    Receive regA,
    Push regA,
    Load (ImmValue 4) regA,
    Pop regB,
    Compute Add regB regA regA,
    WriteInstr regA (DirAddr 3),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    Jump (Rel  (-23)),
    WriteInstr regSprID (DirAddr 1),
    Jump (Abs 6),
    ReadInstr (DirAddr 2),
    Receive regA,
    Load (ImmValue 2) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-5)),
    WriteInstr regPC (DirAddr 2),
    Load (ImmValue 0) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 26),
    ReadInstr (DirAddr 3),
    Receive regA,
    Push regA,
    Load (ImmValue 36) regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 16),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    ReadInstr (DirAddr 3),
    Receive regA,
    Push regA,
    Load (ImmValue 4) regA,
    Pop regB,
    Compute Add regB regA regA,
    WriteInstr regA (DirAddr 3),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    Jump (Rel  (-23)),
    WriteInstr regSprID (DirAddr 2),
    Jump (Abs 6),
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    ReadInstr (DirAddr 2),
    Receive regA,
    Load (ImmValue 2) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-9)),
    ReadInstr (DirAddr 3),
    Receive regA,
    WriteInstr regA numberIO,
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    ReadInstr (DirAddr 2),
    Receive regA,
    Load (ImmValue 2) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-9)),
    Compute Add reg0 regPC regA,
    Compute Equal regSprID reg0 regB,
    Branch regB (Rel 2),
    EndProg,
    WriteInstr regA (DirAddr 1),
    WriteInstr regA (DirAddr 2),
    EndProg]
main = run [prog,prog,prog]
