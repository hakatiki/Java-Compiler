import Sprockell
prog :: [Instruction]
prog = [
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    Load (ImmValue 1) regA,
    WriteInstr regA (DirAddr 1),
    Load (ImmValue 2) regA,
    WriteInstr regA (DirAddr 2),
    Load (ImmValue 3) regA,
    WriteInstr regA (DirAddr 3),
    Load (ImmValue 4) regA,
    WriteInstr regA (DirAddr 4),
    ReadInstr (IndAddr regSprID),
    Receive regA,
    Compute Equal regSprID reg0 regB,
    Branch regB (Rel 4),
    Compute NEq regA regSprID regB,
    Branch regB (Ind regA),
    Jump (Rel (-6)),
    Load (ImmValue 12) regA,
    WriteInstr regA (DirAddr 5),
    Load (ImmValue 53) regA,
    WriteInstr regA (DirAddr 6),
    Load (ImmValue 17) regA,
    WriteInstr regA (DirAddr 7),
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    WriteInstr regPC (DirAddr 1),
    Load (ImmValue 0) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 165),
    Compute Add regSprID reg0 regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Equal regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 15),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Load (ImmValue 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    Jump (Rel 18),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 50) regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 2) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 100) regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    ReadInstr (DirAddr 3),
    Receive regA,
    Load (ImmValue 3) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    WriteInstr regPC (DirAddr 3),
    Load (ImmValue 1) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 49),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Compute Add regSprID reg0 regA,
    Push regA,
    Load (ImmValue 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Mul regB regA regA,
    Push regA,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 21),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Push regA,
    Load (ImmValue 10) regA,
    Pop regB,
    Compute Sub regB regA regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Jump (Rel  (-38)),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    WriteInstr regSprID (DirAddr 3),
    Jump (Abs 10),
    ReadInstr (DirAddr 4),
    Receive regA,
    Load (ImmValue 4) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    WriteInstr regPC (DirAddr 4),
    Load (ImmValue 1) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 49),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Compute Add regSprID reg0 regA,
    Push regA,
    Load (ImmValue 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Mul regB regA regA,
    Push regA,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 21),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Push regA,
    Load (ImmValue 10) regA,
    Pop regB,
    Compute Sub regB regA regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Jump (Rel  (-38)),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    WriteInstr regSprID (DirAddr 4),
    Jump (Abs 10),
    ReadInstr (DirAddr 3),
    Receive regA,
    Load (ImmValue 3) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    ReadInstr (DirAddr 4),
    Receive regA,
    Load (ImmValue 4) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-9)),
    WriteInstr regSprID (DirAddr 1),
    Jump (Abs 10),
    ReadInstr (DirAddr 2),
    Receive regA,
    Load (ImmValue 2) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    WriteInstr regPC (DirAddr 2),
    Load (ImmValue 0) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 165),
    Compute Add regSprID reg0 regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Equal regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 15),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Load (ImmValue 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    Jump (Rel 18),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 50) regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 2) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 100) regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    WriteInstr regPC (DirAddr 1),
    Load (ImmValue 2) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 49),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Compute Add regSprID reg0 regA,
    Push regA,
    Load (ImmValue 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Mul regB regA regA,
    Push regA,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 21),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Push regA,
    Load (ImmValue 10) regA,
    Pop regB,
    Compute Sub regB regA regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Jump (Rel  (-38)),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    WriteInstr regSprID (DirAddr 1),
    Jump (Abs 10),
    ReadInstr (DirAddr 3),
    Receive regA,
    Load (ImmValue 3) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    WriteInstr regPC (DirAddr 3),
    Load (ImmValue 2) regA,
    Compute Equal regSprID regA regB,
    Branch regB (Rel 49),
    TestAndSet (DirAddr 0),
    Receive regD,
    Load (ImmValue 1) regC,
    Compute NEq regD regC regD,
    Branch regD (Rel (-4)),
    Compute Add regSprID reg0 regA,
    Push regA,
    Load (ImmValue 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Mul regB regA regA,
    Push regA,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 21),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regE,
    Compute Add regA regE regE,
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    Push regA,
    Load (ImmValue 10) regA,
    Pop regB,
    Compute Sub regB regA regA,
    WriteInstr regA (IndAddr regE),
    Load (ImmValue 1) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Jump (Rel  (-38)),
    Load (ImmValue 0) regA,
    WriteInstr regA (DirAddr 0),
    WriteInstr regSprID (DirAddr 3),
    Jump (Abs 10),
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    ReadInstr (DirAddr 3),
    Receive regA,
    Load (ImmValue 3) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-9)),
    WriteInstr regSprID (DirAddr 2),
    Jump (Abs 10),
    ReadInstr (DirAddr 1),
    Receive regA,
    Load (ImmValue 1) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-4)),
    ReadInstr (DirAddr 2),
    Receive regA,
    Load (ImmValue 2) regC,
    Compute NEq regA regC regB,
    Branch regB (Rel (-9)),
    Load (ImmValue 0) regA,
    Store regA (DirAddr 0),
    Load (DirAddr 0) regA,
    Push regA,
    Load (ImmValue 3) regA,
    Pop regB,
    Compute Lt regB regA regA,
    Compute Equal regA reg0 regA,
    Branch regA (Rel 14),
    Load (DirAddr 0) regA,
    Load (ImmValue 5) regB,
    Compute Add regB regA regA,
    ReadInstr (IndAddr regA),
    Receive regA,
    WriteInstr regA numberIO,
    Load (DirAddr 0) regA,
    Push regA,
    Load (ImmValue 1) regA,
    Pop regB,
    Compute Add regB regA regA,
    Store regA (DirAddr 0),
    Jump (Rel  (-19)),
    Compute Add reg0 regPC regA,
    Compute Equal regSprID reg0 regB,
    Branch regB (Rel 2),
    EndProg,
    WriteInstr regA (DirAddr 1),
    WriteInstr regA (DirAddr 2),
    WriteInstr regA (DirAddr 3),
    WriteInstr regA (DirAddr 4),
    EndProg]
main = run [prog,prog,prog,prog,prog]
